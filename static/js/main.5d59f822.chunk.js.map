{"version":3,"sources":["components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["SubMenu","Menu","Content","Layout","Sider","Main","props","state","breadcrumbs","style","margin","this","map","crumb","index","Item","className","padding","width","mode","defaultSelectedKeys","defaultOpenKeys","height","key","title","minHeight","Component","Header","Footer","App","alt","src","theme","float","background","color","CaretDownOutlined","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAKQA,G,MAAYC,IAAZD,SACAE,EAAmBC,IAAnBD,QAASE,EAAUD,IAAVC,MAgDFC,E,kDA7Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,YAAa,IAJE,E,qDASjB,OACE,6BACE,kBAAC,IAAD,CAAYC,MAAO,CAAEC,OAAQ,WAEzBC,KAAKJ,MAAMC,YAAYI,KAAI,SAACC,EAAOC,GACjC,OAAO,kBAAC,IAAWC,KAAZ,KAAmBF,OAIhC,kBAAC,IAAD,CAAQG,UAAU,yBAAyBP,MAAO,CAAEQ,QAAS,WAC3D,kBAACb,EAAD,CAAOY,UAAU,yBAAyBE,MAAO,KAC/C,kBAAC,IAAD,CACEC,KAAK,SACLC,oBAAqB,CAAC,QACtBC,gBAAiB,CAAC,QAClBZ,MAAO,CAAEa,OAAQ,SAEjB,kBAACtB,EAAD,CAASuB,IAAI,OAAOC,MAAM,YACxB,kBAAC,IAAKT,KAAN,CAAWQ,IAAI,KAAf,WACA,kBAAC,IAAKR,KAAN,CAAWQ,IAAI,KAAf,WACA,kBAAC,IAAKR,KAAN,CAAWQ,IAAI,KAAf,WACA,kBAAC,IAAKR,KAAN,CAAWQ,IAAI,KAAf,YAEF,kBAACvB,EAAD,CAASuB,IAAI,OAAOC,MAAM,WACxB,kBAAC,IAAKT,KAAN,CAAWQ,IAAI,KAAf,6BACA,kBAAC,IAAKR,KAAN,CAAWQ,IAAI,KAAf,+BAIN,kBAACrB,EAAD,CAASO,MAAO,CAAEQ,QAAS,SAAUQ,UAAW,MAAhD,iB,GAvCSC,aCAXC,G,OAA4BxB,IAA5BwB,QAAQzB,EAAoBC,IAApBD,QAAS0B,EAAWzB,IAAXyB,OAyBVC,EAvBH,WACV,OACE,kBAAC,IAAD,KACE,kBAACF,EAAD,CAAQX,UAAU,UAChB,yBAAKA,UAAU,QAAO,4BAAI,yBAAKc,IAAI,UAAUC,IAAI,4GAA3B,IAAwI,gDAC9J,kBAAC,IAAD,CAAMC,MAAM,OAAOb,KAAK,aAAaV,MAAO,CAAEwB,MAAO,UACnD,kBAAC,IAAKlB,KAAN,CAAWQ,IAAI,KAAf,oBACA,kBAAC,IAAKR,KAAN,CAAWQ,IAAI,KAAf,SACA,kBAAC,IAAKR,KAAN,CAAWQ,IAAI,IAAId,MAAO,CAAEyB,WAAY,UAAWC,MAAO,SAA1D,qBACA,kBAAC,IAAKpB,KAAN,CAAWQ,IAAI,KAAf,gBACA,kBAAC,IAAKR,KAAN,CAAWQ,IAAI,KAAf,WACU,kBAACa,EAAA,EAAD,SAId,kBAAC,EAAD,CAAS3B,MAAO,CAAEQ,QAAS,WACzB,kBAAC,EAAD,OAEF,kBAACW,EAAD,CAAQnB,MAAO,CAAE4B,UAAW,WAA5B,qDChBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5d59f822.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Layout, Menu, Breadcrumb } from 'antd';\n\nimport './Main.css';\n\nconst { SubMenu } = Menu;\nconst { Content, Sider } = Layout;\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      breadcrumbs: []\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          { \n            this.state.breadcrumbs.map((crumb, index) => {\n              return <Breadcrumb.Item>{ crumb }</Breadcrumb.Item>\n            })\n          }\n        </Breadcrumb>\n        <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\n          <Sider className=\"site-layout-background\" width={275}>\n            <Menu\n              mode=\"inline\"\n              defaultSelectedKeys={['sub1']}\n              defaultOpenKeys={['sub2']}\n              style={{ height: '100%' }}\n            >\n              <SubMenu key=\"sub1\" title=\"Overview\">\n                <Menu.Item key=\"1\">option1</Menu.Item>\n                <Menu.Item key=\"2\">option2</Menu.Item>\n                <Menu.Item key=\"3\">option3</Menu.Item>\n                <Menu.Item key=\"4\">option4</Menu.Item>\n              </SubMenu>\n              <SubMenu key=\"sub2\" title=\"Cohorts\">\n                <Menu.Item key=\"5\">Code for Good (June 2020)</Menu.Item>\n                <Menu.Item key=\"6\">Code for Good (Oct 2020)</Menu.Item>\n              </SubMenu>\n            </Menu>\n          </Sider>\n          <Content style={{ padding: '0 24px', minHeight: 280 }}>Content</Content>\n        </Layout>\n      </div>\n    )\n  }\n}\n\nexport default Main;","import React from 'react';\nimport { Layout, Menu } from 'antd';\nimport { CaretDownOutlined } from '@ant-design/icons';\n\nimport Main from './Main';\n\nimport './App.css';\n\nconst { Header, Content, Footer } = Layout;\n\nconst App = () => {\n  return (\n    <Layout>\n      <Header className=\"header\">\n        <div className=\"logo\"><h1><img alt=\"GA Logo\" src=\"https://ga-core.s3.amazonaws.com/production/uploads/program/default_image/6301/GA_Cog_Large_Red_RGB.png\" /> <span>B2B for Good</span></h1></div>\n        <Menu theme=\"dark\" mode=\"horizontal\" style={{ float: 'right' }}>\n          <Menu.Item key=\"1\">Upcoming Cohorts</Menu.Item>\n          <Menu.Item key=\"2\">About</Menu.Item>\n          <Menu.Item key=\"3\" style={{ background: '#fa4542', color: '#fff' }}>Sponsor a Student</Menu.Item>\n          <Menu.Item key=\"4\">My Dashboard</Menu.Item>\n          <Menu.Item key=\"5\">\n            Account <CaretDownOutlined />\n          </Menu.Item>\n        </Menu>\n      </Header>\n      <Content style={{ padding: '0 50px' }}>\n        <Main />\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Â©2020 General Assembly. All rights reserved.</Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}